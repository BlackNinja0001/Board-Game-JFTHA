/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.event.ActionListener;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import jftha.heroes.*;
import jftha.items.*;
import jftha.main.*;
import jftha.spaces.*;
import jftha.spells.*;

/**
 *
 * @author tue75856 Josh
 */
public class BoardGUI extends javax.swing.JFrame {

    Player players[], orderedPlayers[];
    int howmany;
    int turnNumber;
    int turnPhase;
    Dice die;
    Board board = new Board();
    int spaceTotal = 22;
    int currentDieRoll = 0;

    //Turn phases
    public static final int ITEM_1 = 0,
            DICE_ROLL = 1,
            ATTACK = 2,
            ITEM_2 = 3,
            END = 4;

    public BoardGUI() {
        howmany = 4;
        players = new Player[howmany];
        initComponents();
        die = new Dice(howmany);
        turnNumber = 1;
    }

    /**
     * Creates new form BoardGUI
     */
    public BoardGUI(Player playas[]) {
        howmany = playas.length;
        players = playas;
        initComponents();
        die = new Dice(howmany);
        turnNumber = 1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rollDieButton = new javax.swing.JButton();
        dieLabel = new javax.swing.JLabel();
        PlayerOneInfoLabel = new javax.swing.JLabel();
        PlayerTwoInfoLabel = new javax.swing.JLabel();
        PlayerThreeInfoLabel = new javax.swing.JLabel();
        PlayerFourInfoLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        OutputScrollPane = new javax.swing.JScrollPane();
        OutputTextArea = new javax.swing.JTextArea();
        jSeparator2 = new javax.swing.JSeparator();
        CurPlayerLabel = new javax.swing.JLabel();
        CurPhaseLabel = new javax.swing.JLabel();
        ItemOneLabel = new javax.swing.JLabel();
        ItemTwoLabel = new javax.swing.JLabel();
        ItemThreeLabel = new javax.swing.JLabel();
        ItemFiveLabel = new javax.swing.JLabel();
        ItemFourLabel = new javax.swing.JLabel();
        ItemSevenLabel = new javax.swing.JLabel();
        ItemEightLabel = new javax.swing.JLabel();
        ItemSixLabel = new javax.swing.JLabel();
        boardLayeredPane = new javax.swing.JLayeredPane();
        spaceLabel1 = new javax.swing.JLabel();
        spaceLabel18 = new javax.swing.JLabel();
        spaceLabel22 = new javax.swing.JLabel();
        spaceLabel21 = new javax.swing.JLabel();
        spaceLabel20 = new javax.swing.JLabel();
        spaceLabel19 = new javax.swing.JLabel();
        spaceLabel2 = new javax.swing.JLabel();
        spaceLabel3 = new javax.swing.JLabel();
        spaceLabel4 = new javax.swing.JLabel();
        spaceLabel5 = new javax.swing.JLabel();
        spaceLabel6 = new javax.swing.JLabel();
        spaceLabel7 = new javax.swing.JLabel();
        spaceLabel8 = new javax.swing.JLabel();
        spaceLabel9 = new javax.swing.JLabel();
        spaceLabel10 = new javax.swing.JLabel();
        spaceLabel11 = new javax.swing.JLabel();
        spaceLabel12 = new javax.swing.JLabel();
        spaceLabel13 = new javax.swing.JLabel();
        spaceLabel14 = new javax.swing.JLabel();
        spaceLabel15 = new javax.swing.JLabel();
        spaceLabel16 = new javax.swing.JLabel();
        spaceLabel17 = new javax.swing.JLabel();
        boardLabel = new javax.swing.JLabel();
        characterLabel1 = new javax.swing.JLabel();
        characterLabel2 = new javax.swing.JLabel();
        characterLabel3 = new javax.swing.JLabel();
        characterLabel4 = new javax.swing.JLabel();
        characterLabel5 = new javax.swing.JLabel();
        characterLabel6 = new javax.swing.JLabel();
        characterLabel7 = new javax.swing.JLabel();
        characterLabel8 = new javax.swing.JLabel();
        characterLabel9 = new javax.swing.JLabel();
        characterLabel10 = new javax.swing.JLabel();
        characterLabel11 = new javax.swing.JLabel();
        characterLabel12 = new javax.swing.JLabel();
        characterLabel13 = new javax.swing.JLabel();
        characterLabel14 = new javax.swing.JLabel();
        characterLabel15 = new javax.swing.JLabel();
        characterLabel16 = new javax.swing.JLabel();
        characterLabel17 = new javax.swing.JLabel();
        characterLabel18 = new javax.swing.JLabel();
        characterLabel19 = new javax.swing.JLabel();
        characterLabel20 = new javax.swing.JLabel();
        characterLabel21 = new javax.swing.JLabel();
        characterLabel22 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(null);
        setMinimumSize(null);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        rollDieButton.setText("Roll Die");
        rollDieButton.setEnabled(false);
        rollDieButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollDieButtonActionPerformed(evt);
            }
        });

        dieLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/die1.png"))); // NOI18N
        dieLabel.setEnabled(false);
        dieLabel.setName("dieLabel"); // NOI18N

        PlayerOneInfoLabel.setText("Player 1 Info");
        PlayerOneInfoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        PlayerOneInfoLabel.setPreferredSize(new java.awt.Dimension(35, 35));

        PlayerTwoInfoLabel.setText("Player 2 Info");
        PlayerTwoInfoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        PlayerTwoInfoLabel.setPreferredSize(new java.awt.Dimension(35, 35));

        PlayerThreeInfoLabel.setText("Player 3 Info");
        PlayerThreeInfoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        PlayerThreeInfoLabel.setPreferredSize(new java.awt.Dimension(35, 35));

        PlayerFourInfoLabel.setText("Player 4 Info");
        PlayerFourInfoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        PlayerFourInfoLabel.setPreferredSize(new java.awt.Dimension(35, 35));

        OutputTextArea.setEditable(false);
        OutputTextArea.setColumns(20);
        OutputTextArea.setRows(5);
        OutputScrollPane.setViewportView(OutputTextArea);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        CurPlayerLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        CurPlayerLabel.setText("Player ?");

        CurPhaseLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        CurPhaseLabel.setText("????? Phase [1,2]");

        ItemOneLabel.setText("Item 1");
        ItemOneLabel.setToolTipText("Item 1");

        ItemTwoLabel.setText("Item 2");
        ItemTwoLabel.setToolTipText("Item 2");

        ItemThreeLabel.setText("Item 3");
        ItemThreeLabel.setToolTipText("Item 3");

        ItemFiveLabel.setText("Item 5");
        ItemFiveLabel.setToolTipText("Item 5");

        ItemFourLabel.setText("Item 4");
        ItemFourLabel.setToolTipText("Item 4");

        ItemSevenLabel.setText("Item 7");
        ItemSevenLabel.setToolTipText("Item 7");

        ItemEightLabel.setText("Item 8");
        ItemEightLabel.setToolTipText("Item 8");

        ItemSixLabel.setText("Item 6");
        ItemSixLabel.setToolTipText("Item 6");

        spaceLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel1);
        spaceLabel1.setBounds(600, 430, 50, 50);
        boardLayeredPane.setLayer(spaceLabel1, javax.swing.JLayeredPane.PALETTE_LAYER);
        spaceLabel1.getAccessibleContext().setAccessibleName("spaceLabel1");

        spaceLabel18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel18);
        spaceLabel18.setBounds(460, 80, 50, 50);
        boardLayeredPane.setLayer(spaceLabel18, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel22.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel22);
        spaceLabel22.setBounds(580, 340, 50, 50);
        boardLayeredPane.setLayer(spaceLabel22, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel21);
        spaceLabel21.setBounds(500, 280, 50, 50);
        boardLayeredPane.setLayer(spaceLabel21, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel20);
        spaceLabel20.setBounds(490, 210, 50, 50);
        boardLayeredPane.setLayer(spaceLabel20, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel19.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel19);
        spaceLabel19.setBounds(500, 130, 50, 50);
        boardLayeredPane.setLayer(spaceLabel19, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel2);
        spaceLabel2.setBounds(530, 380, 50, 50);
        boardLayeredPane.setLayer(spaceLabel2, javax.swing.JLayeredPane.PALETTE_LAYER);
        spaceLabel2.getAccessibleContext().setAccessibleName("spaceLabel2");

        spaceLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel3);
        spaceLabel3.setBounds(450, 340, 50, 50);
        boardLayeredPane.setLayer(spaceLabel3, javax.swing.JLayeredPane.PALETTE_LAYER);
        spaceLabel3.getAccessibleContext().setAccessibleName("spaceLabel1");

        spaceLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel4);
        spaceLabel4.setBounds(340, 320, 50, 50);
        boardLayeredPane.setLayer(spaceLabel4, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel5);
        spaceLabel5.setBounds(210, 350, 50, 50);
        boardLayeredPane.setLayer(spaceLabel5, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel6);
        spaceLabel6.setBounds(230, 270, 50, 50);
        boardLayeredPane.setLayer(spaceLabel6, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel7);
        spaceLabel7.setBounds(150, 270, 50, 50);
        boardLayeredPane.setLayer(spaceLabel7, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel8);
        spaceLabel8.setBounds(70, 250, 50, 50);
        boardLayeredPane.setLayer(spaceLabel8, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel9);
        spaceLabel9.setBounds(60, 180, 50, 50);
        boardLayeredPane.setLayer(spaceLabel9, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel10);
        spaceLabel10.setBounds(60, 120, 50, 50);
        boardLayeredPane.setLayer(spaceLabel10, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel11);
        spaceLabel11.setBounds(10, 70, 50, 50);
        boardLayeredPane.setLayer(spaceLabel11, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel12);
        spaceLabel12.setBounds(70, 20, 50, 50);
        boardLayeredPane.setLayer(spaceLabel12, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel13);
        spaceLabel13.setBounds(160, 30, 50, 50);
        boardLayeredPane.setLayer(spaceLabel13, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel14);
        spaceLabel14.setBounds(210, 80, 50, 50);
        boardLayeredPane.setLayer(spaceLabel14, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel15);
        spaceLabel15.setBounds(260, 130, 50, 50);
        boardLayeredPane.setLayer(spaceLabel15, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel16.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel16);
        spaceLabel16.setBounds(310, 90, 50, 50);
        boardLayeredPane.setLayer(spaceLabel16, javax.swing.JLayeredPane.PALETTE_LAYER);

        spaceLabel17.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        boardLayeredPane.add(spaceLabel17);
        spaceLabel17.setBounds(390, 100, 50, 50);
        boardLayeredPane.setLayer(spaceLabel17, javax.swing.JLayeredPane.PALETTE_LAYER);

        boardLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Fantasy Map (22 Spaces)-resized.png"))); // NOI18N
        boardLayeredPane.add(boardLabel);
        boardLabel.setBounds(0, 0, 660, 488);

        characterLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel1);
        characterLabel1.setBounds(610, 440, 30, 30);
        boardLayeredPane.setLayer(characterLabel1, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel2);
        characterLabel2.setBounds(540, 390, 30, 30);
        boardLayeredPane.setLayer(characterLabel2, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel3);
        characterLabel3.setBounds(460, 350, 30, 30);
        boardLayeredPane.setLayer(characterLabel3, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel4);
        characterLabel4.setBounds(350, 330, 30, 30);
        boardLayeredPane.setLayer(characterLabel4, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel5);
        characterLabel5.setBounds(220, 360, 30, 30);
        boardLayeredPane.setLayer(characterLabel5, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel6);
        characterLabel6.setBounds(240, 280, 30, 30);
        boardLayeredPane.setLayer(characterLabel6, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel7);
        characterLabel7.setBounds(160, 280, 30, 30);
        boardLayeredPane.setLayer(characterLabel7, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel8);
        characterLabel8.setBounds(80, 260, 30, 30);
        boardLayeredPane.setLayer(characterLabel8, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel9);
        characterLabel9.setBounds(70, 190, 30, 30);
        boardLayeredPane.setLayer(characterLabel9, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel10);
        characterLabel10.setBounds(70, 130, 30, 30);
        boardLayeredPane.setLayer(characterLabel10, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel11);
        characterLabel11.setBounds(20, 80, 30, 30);
        boardLayeredPane.setLayer(characterLabel11, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel12);
        characterLabel12.setBounds(80, 30, 30, 30);
        boardLayeredPane.setLayer(characterLabel12, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel13);
        characterLabel13.setBounds(170, 40, 30, 30);
        boardLayeredPane.setLayer(characterLabel13, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel14);
        characterLabel14.setBounds(220, 90, 30, 30);
        boardLayeredPane.setLayer(characterLabel14, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel15);
        characterLabel15.setBounds(270, 140, 30, 30);
        boardLayeredPane.setLayer(characterLabel15, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel16.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel16);
        characterLabel16.setBounds(320, 100, 30, 30);
        boardLayeredPane.setLayer(characterLabel16, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel17.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel17);
        characterLabel17.setBounds(400, 110, 30, 30);
        boardLayeredPane.setLayer(characterLabel17, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel18);
        characterLabel18.setBounds(470, 90, 30, 30);
        boardLayeredPane.setLayer(characterLabel18, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel19.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel19);
        characterLabel19.setBounds(510, 140, 30, 30);
        boardLayeredPane.setLayer(characterLabel19, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel20);
        characterLabel20.setBounds(500, 220, 30, 30);
        boardLayeredPane.setLayer(characterLabel20, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel21);
        characterLabel21.setBounds(510, 290, 30, 30);
        boardLayeredPane.setLayer(characterLabel21, javax.swing.JLayeredPane.MODAL_LAYER);

        characterLabel22.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0)));
        boardLayeredPane.add(characterLabel22);
        characterLabel22.setBounds(590, 350, 30, 30);
        boardLayeredPane.setLayer(characterLabel22, javax.swing.JLayeredPane.MODAL_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(OutputScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ItemOneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ItemTwoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ItemFiveLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ItemSixLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ItemSevenLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ItemEightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ItemThreeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ItemFourLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(boardLayeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
                    .addComponent(jSeparator1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(PlayerFourInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                        .addComponent(PlayerThreeInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PlayerTwoInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PlayerOneInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(rollDieButton)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(CurPlayerLabel)
                                .addComponent(CurPhaseLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(dieLabel))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PlayerOneInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PlayerTwoInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PlayerThreeInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PlayerFourInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CurPlayerLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CurPhaseLabel))
                    .addComponent(dieLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rollDieButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boardLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ItemOneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ItemThreeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ItemTwoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ItemFourLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ItemFiveLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ItemSevenLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ItemEightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ItemSixLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(OutputScrollPane))))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rollDieButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollDieButtonActionPerformed
        if (turnPhase == DICE_ROLL) {
            Dice die = new Dice(6);
            currentDieRoll = die.rollGUI(dieLabel);
        }

    }//GEN-LAST:event_rollDieButtonActionPerformed

    /**
     * Displays the board in the spaceLabels
     *
     * @param board
     */
    private void displayBoard(Board board) {
        Space current = board.getStart();
        JLabel spaceLabels[] = new JLabel[spaceTotal];

        //assign spaceLabels manually
        spaceLabels[0] = spaceLabel1;
        spaceLabels[1] = spaceLabel2;
        spaceLabels[2] = spaceLabel3;
        spaceLabels[3] = spaceLabel4;
        spaceLabels[4] = spaceLabel5;
        spaceLabels[5] = spaceLabel6;
        spaceLabels[6] = spaceLabel7;
        spaceLabels[7] = spaceLabel8;
        spaceLabels[8] = spaceLabel9;
        spaceLabels[9] = spaceLabel10;
        spaceLabels[10] = spaceLabel11;
        spaceLabels[11] = spaceLabel12;
        spaceLabels[12] = spaceLabel13;
        spaceLabels[13] = spaceLabel14;
        spaceLabels[14] = spaceLabel15;
        spaceLabels[15] = spaceLabel16;
        spaceLabels[16] = spaceLabel17;
        spaceLabels[17] = spaceLabel18;
        spaceLabels[18] = spaceLabel19;
        spaceLabels[19] = spaceLabel20;
        spaceLabels[20] = spaceLabel21;
        spaceLabels[21] = spaceLabel22;

        for (int i = 0; current.next != board.getStart(); i++) {
            ImageIcon icon = new ImageIcon();
            if (current.getSpaceType() == SpaceEnum.Card) {
                icon = new ImageIcon(getClass().getResource("/images/Random Card space-resized.png"));
            } else if (current.getSpaceType() == SpaceEnum.Chest) {
                icon = new ImageIcon(getClass().getResource("/images/Chest space-resized.png"));
            } else if (current.getSpaceType() == SpaceEnum.D2D) {
                icon = new ImageIcon(getClass().getResource("/images/Duel to the death space-resized.png"));
            } else if (current.getSpaceType() == SpaceEnum.Gold) {
                icon = new ImageIcon(getClass().getResource("/images/gold space-resized.jpg"));
            } else if (current.getSpaceType() == SpaceEnum.Health) {
                icon = new ImageIcon(getClass().getResource("/images/Duel to the death space-resized.png"));
            } else if (current.getSpaceType() == SpaceEnum.Store) {
                icon = new ImageIcon(getClass().getResource("/images/Shop space-resized.png"));
            } else if (current.getSpaceType() == SpaceEnum.Blank) {
                icon = new ImageIcon(getClass().getResource("/images/blank space-resized.png"));
            } else if (current.getSpaceType() == SpaceEnum.Bank) {
                icon = new ImageIcon(getClass().getResource("/images/bank space-resized.jpg"));
            } else if (current.getSpaceType() == SpaceEnum.Monster) {
                icon = new ImageIcon(getClass().getResource("/images/monster image-resized.jpg"));
            }
            spaceLabels[i].setIcon(icon);
            current = current.next;
        }
        //last label needs to be displayed manually (as Blank)
        spaceLabels[spaceTotal - 1].setIcon(new ImageIcon(getClass().getResource("/images/blank space-resized.png")));
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        OutputTextArea.append("Welcome to Journey for the Holy Artifact!\n");

        //Make itemLabels "invisible
        ItemOneLabel.setText("");
        ItemTwoLabel.setText("");
        ItemThreeLabel.setText("");
        ItemFourLabel.setText("");
        ItemFiveLabel.setText("");
        ItemSixLabel.setText("");
        ItemSevenLabel.setText("");
        ItemEightLabel.setText("");

        OutputTextArea.append("Generating board...\n");
        board.generateBoard(spaceTotal);
        displayBoard(board);

        OutputTextArea.append("Determining turn order...\n");
        BoardGUI.setTurnOrder(howmany, players, die);

        //Order the players based on when they go and assign their spawn points (currently all at space 1)
        orderedPlayers = new Player[howmany];
        for (int i = 0; i < howmany; i++) {
            orderedPlayers[players[i].getTurnOrder() - 1] = players[i];
            players[i].setCurrentSpace(board.getStart());
        }

        for (int i = 1; (i - 1) < howmany; i++) {
            StringBuilder sb = new StringBuilder();
            String order = "";
            int curTurnOrder = orderedPlayers[i - 1].getTurnOrder();
            if (curTurnOrder == 1) {
                order = "1st";
            } else if (curTurnOrder == 2) {
                order = "2nd";
            } else if (curTurnOrder == 3) {
                order = "3rd";
            } else if (curTurnOrder == 4) {
                order = "4th";
            }
            sb.append("Player ").append(i)
                    .append(" is a ").append(orderedPlayers[i - 1].getCharacter().getClassName())
                    .append(" named ").append(orderedPlayers[i - 1].getCustomName())
                    .append(" and is going ").append(order).append(".");
            OutputTextArea.append(sb.toString() + "\n");
        }
        updatePlayerInfo();
        int winner;
        do {
            int i;
            for (i = 0; i < howmany; i++) {
                executeTurn(orderedPlayers[i]);
            }
            i = 0;
            //orderedPlayers[0].setIsWinner(true); //test winner
            winner = anyoneWon(orderedPlayers);
        } while (winner == -1);

        //Win message for winner
        for (int i = 0; i < orderedPlayers.length; i++) {
            if (orderedPlayers[i].isWinner()) {
                JOptionPane.showMessageDialog(this, "Wiener!",
                        "Congratulations, " + orderedPlayers[i].getCustomName() + "! You're a winner!", JOptionPane.PLAIN_MESSAGE,
                        new ImageIcon(getClass().getResource("/images/win or lose.jpg")));
                OutputTextArea.append(orderedPlayers[i].getCustomName() + " is the winner!");
            } else {
                JOptionPane.showMessageDialog(this, "Loser!",
                        "Congratulations, " + orderedPlayers[i].getCustomName() + "! You suck!", JOptionPane.PLAIN_MESSAGE,
                        new ImageIcon(getClass().getResource("/images/your-a-loser2.jpg")));
            }
        }
        this.dispose(); //close window
    }//GEN-LAST:event_formWindowOpened

    public static void setTurnOrder(int howmany, Player[] players, Dice die) {
        for (int i = 0; i < howmany; i++) { //Give every player an initial turn order
            players[i].setTurnOrder(die.roll());
        }

        for (int j = 0; j < howmany; j++) { //for every player
            int roll = die.roll();
            boolean didReroll = true;
            while (didReroll) {
                didReroll = false;
                for (int k = 0; k < howmany; k++) { //check if any turnOrders match and changes accordingly
                    if (j != k) { //not checking player to itself
                        while (roll == players[k].getTurnOrder()) { //reroll until it doesn't match the current player
                            roll = die.roll();
                            didReroll = true;
                        }
                    }
                }
            }
            players[j].setTurnOrder(roll);
        }
    }

    /**
     * Checks whether or not a player has won the game.
     *
     * @param players The players in the game
     * @return The player that won the game
     */
    public Player winner(Player[] players) {
        Player ret = null;
        int winnerIndex;
        for (Player p : players) {
            if (5 == p.getCharacter().getArtifacts().size()) {
                p.setIsWinner(true);
                return p;
            }
        }

        if (players.length == 4) {
            // Have all opponents dead for at least a period of 5 turns (4 player only)

            for (int i = 0; i < players.length; i++) {
                upWinCountValidated(players, i);
                if (allOpponentsNonExistent(players, i)) {
                    ret = players[i];
                }
            }

            if ((winnerIndex = anyoneWon(players)) != -1) {
                ret = players[winnerIndex];
            }

            // any resurrections reset counter
        } // OR
        // Have all player ghosts non-existent (killed as ghost)
        else {
            for (int i = 0; i < players.length; i++) {
                if (allOpponentsNonExistent(players, i)) {
                    players[i].setIsWinner(true);
                    ret = players[i];
                }
            }
        }
        return ret;
    }

    /**
     * Checks if players[winningPlayer]'s winCount can be upped (all opponents
     * dead). If so, then increment players[winningPlayer]'s winCount. If not
     * players[winningPlayer]'s winCount is reset to zero.
     *
     * @param players the players currently playing
     * @param winningPlayer the index of the player soon to win
     * @return true if players[winningPlayer]'s winCount is ready to be upped
     */
    public boolean upWinCountValidated(Player[] players, int winningPlayer) {
        //Winning players cannot be ghosts and this method only applies to 4-player games
        if ((players[winningPlayer].getCharacter().isGhost()) || (players.length < 4)) {
            return false;
        }

        boolean valid = true;
        for (int i = 0; i < players.length; i++) {
            if (i != winningPlayer) { //do not check if winning player is ghost
                if (!players[i].getCharacter().isGhost()) {
                    valid = false;
                }
            }
        }

        if (valid) {
            players[winningPlayer].upWinCount();
        } else {
            players[winningPlayer].setWinCount(0);
        }

        if (players[winningPlayer].getWinCount() > 4) { //if 5 turns elapsed, player wins
            players[winningPlayer].setIsWinner(true);
        }

        return valid;
    }

    /**
     * Checks if anyone won the game.
     *
     * @param players the players currently playing
     * @return the index of the winner or -1 if there is no winner
     */
    public int anyoneWon(Player[] players) {
        int winnerIndex = -1;

        for (int i = 0; i < players.length; i++) {
            if (players[i].isWinner()) {
                winnerIndex = i;
                return winnerIndex;
            }
        }

        return winnerIndex;
    }

    /**
     * Checks if all opponents of "winningPlayer" are non-existent (died as
     * ghost)
     *
     * @param players The players in the game
     * @param winningPlayer The player that is currently winning
     * @return true if all opponents were killed as ghosts; false if at least
     * one opponent is still in play
     */
    public boolean allOpponentsNonExistent(Player[] players, int winningPlayer) {
        boolean valid = true;

        for (int i = 0; i < players.length; i++) {
            if (i != winningPlayer) { //do not check if winning player is ghost
                if (!players[i].getCharacter().getEliminated()) {
                    valid = false;
                }
            }
        }

        if (valid) {
            players[winningPlayer].setIsWinner(true);
        }

        return valid;
    }

    /**
     * Current Player's Turn Phase
     *
     * @param performer
     * @throws IllegalActivationTypeException
     */
    public void executeTurn(Player performer) throws IllegalActivationTypeException {
        CurPlayerLabel.setText(performer.getCustomName() + "'s turn.");
        Scanner scan = new Scanner(System.in);
        Hero playerChar = performer.getCharacter();
        //Item phase 1
        turnPhase = ITEM_1;
        CurPhaseLabel.setText("Item Phase 1");
        if (turnNumber > 2) {
            itemPhase(performer);
        }
        updatePlayerInfo();

        //Dice Roll (factoring in Agility and Luck)
        turnPhase = DICE_ROLL;
        CurPhaseLabel.setText("Dice Roll Phase");
        OutputTextArea.append(performer.getCustomName() + ", it's your turn.\n");
        Dice die = new Dice();
        double maxAmount = (playerChar.getAgility() * 0.8) + (playerChar.getLuck() * 0.2); //may need tinkering
        int intMaxAmount = (int) Math.round(maxAmount);
        die.setMaxAmount(intMaxAmount);
        int movement = die.roll();
        //move the player
        // choose direction;
        OutputTextArea.append(performer.getCustomName() + " will move " + movement + " spaces.\n");
        /*System.out.println("Move forward(f) or backward(b): ");
         String s = scan.next();*/

        while (movement > 0) {
            movement--;
            Space current = performer.move("f"); //always move forward for now
            if (current.getActivationType() == 'p' && movement >= 0) { //pass-by not landed on
                if (current.getSpaceType() == SpaceEnum.Store) {
                    OutputTextArea.append(performer.getCustomName() + " is shopping at the store.\n");
                    StringBuilder sb = new StringBuilder();
                    Store current2 = (Store) current;
                    sb = current2.triggerEffect(rootPane, sb);
                    OutputTextArea.append(sb.toString());
                } else {
                    current.triggerEffect();
                }
            } else if (movement == 0 && current.getActivationType() == 'L') { //land-on landed on
                if (current.getSpaceType() == SpaceEnum.D2D) {
                    // Prompt for opponent and pass to triggerEffect
                    OutputTextArea.append(performer.getCustomName() + " has landed on a Duel to the Death space.\n");
                    String opponent = JOptionPane.showInputDialog(performer.getCustomName() + ", select your victim: "); //Needs to loop if player typed in is not available
                    for (int i = 0; i < orderedPlayers.length; i++) {
                        Player potVictim = orderedPlayers[i];
                        if (opponent != null) {
                            if (opponent.equalsIgnoreCase(performer.getCustomName())) {
                                continue;
                            }
                            if (!opponent.equalsIgnoreCase(potVictim.getCustomName()) && (i == orderedPlayers.length - 1)) {
                                JOptionPane.showMessageDialog(rootPane, "No such player.");
                                i = 0;
                                opponent = JOptionPane.showInputDialog("Select your victim: "); //Needs to loop if player typed in is not available
                            } else {
                                StringBuilder sb = new StringBuilder();
                                D2D current2 = (D2D) current;
                                current2.triggerEffect(potVictim, sb);
                                OutputTextArea.append(sb.toString());
                            }
                        }
                    }
                } else {
                    current.triggerEffect();
                }
            } else if ((movement > 0) && (current.getActivationType() == 'L')) { //land-on passed by
                continue;
            } else {
                JOptionPane.showMessageDialog(rootPane, "Error");
                throw new IllegalActivationTypeException();
            }
            //Attack
            if (turnNumber > 2) {
                if (current.getActivator() != null) {
                    turnPhase = ATTACK;
                    CurPhaseLabel.setText("Attack Phase");
                    //Then allow to attack
                    // prompt for response
                    playerChar.attackEnemy(current.getActivator().getCharacter());

                }
            }
            updatePlayerInfo();
        }
        //Item 2
        if (turnNumber > 2) {
            turnPhase = ITEM_2;
            CurPhaseLabel.setText("Item Phase 2");
            itemPhase(performer);
        }

        //Turn End
        turnNumber++;
        turnPhase = END;
        CurPhaseLabel.setText("End Phase");
        playerChar.activateTSCs();
        updatePlayerInfo();
        //Decrement CD and duration of spells if casted
        //Need to remove buff of hero after duration is over to prevent ridiculous stacking of buffs
    }

    /**
     * Current player's item phase
     *
     * @param performer
     */
    public void itemPhase(Player performer) {
        Scanner s = new Scanner(System.in);
        Hero playerChar = performer.getCharacter();
        String choice = new String();
        //int choice = s.nextInt();
        boolean valid = false;
        while (valid) {
            choice = JOptionPane.showInputDialog(performer.getCustomName() + ":\nSpell, special, item, or cancel?"); //cancel button not working
            if (choice != null) {
                if (choice.trim().equalsIgnoreCase("spell")) {
                    this.askForSpell(performer);
                    valid = true;
                } else if (choice.trim().equalsIgnoreCase("special")) {
                    playerChar.triggerSpecial();
                    if (playerChar instanceof Ninja) { //special instance
                        //ask if forward or backward

                        for (int i = 0; i < 3; i++) {
                            performer.move("f"); //can only move forward for now
                        }

                        for (int i = 0; i < orderedPlayers.length; i++) {
                            if (i != performer.getTurnOrder()) { //prevent comparing performer to itself
                                if (performer.getCurrentSpace() == orderedPlayers[i].getCurrentSpace()) {
                                    playerChar.attackEnemy(orderedPlayers[i].getCharacter());
                                    orderedPlayers[i].getCharacter().attackEnemy(playerChar);
                                }
                            }
                        }
                    }
                    valid = true;
                } else if (choice.trim().equalsIgnoreCase("item")) {
                    this.askForItem(performer);
                    valid = true;
                } else if ((choice.trim().equalsIgnoreCase("cancel"))) {
                    return;
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Invalid Answer. Try again.");
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Invalid Answer. Try again.");
            }
        }
    }

    /**
     * Ask if "performer" wants to use a spell.
     *
     * @param performer
     */
    public void askForSpell(Player performer) {
        Hero playerChar = performer.getCharacter();
        Scanner s = new Scanner(System.in);
        int spellCount = 0;
        List<Spell> mySpells;
        int yesOrNo;
        int mistakes = 0;
        while (true) {
            yesOrNo = JOptionPane.showConfirmDialog(rootPane, "Confirm using spell('y' for yes, 'n' for no)?", null, JOptionPane.YES_NO_OPTION);
            if (yesOrNo == JOptionPane.YES_OPTION) {
                mySpells = playerChar.getSpells();
                if (!(mySpells).isEmpty()) {
                    StringBuilder sb = new StringBuilder();
                    for (Spell spell : mySpells) {
                        spellCount++;
                        sb.append(spellCount + ". " + spell.getMessage() + "\n");
                    }
                    int choice = -1;
                    while ((choice < 0) || (choice >= mySpells.size())) {
                        choice = Integer.parseInt(JOptionPane.showInputDialog(rootPane, sb.toString() + "Which spell would you like to use (0 to cancel)?"));

                        if (choice == 0) {
                            return;
                        } else if ((choice >= 0) && (choice < mySpells.size())) {
                            Spell toBeUsed = mySpells.get(choice + 1);
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Invalid Choice.");
                        }
                    }
                }
                break;
            } else if (yesOrNo == JOptionPane.NO_OPTION) {
                itemPhase(performer);
                break;
            } else { //cannot occur anymore
                if (mistakes <= 2) {
                    System.out.println("Invalid Answer.");
                } else if (mistakes == 3) {
                    System.out.println("Invalid Answer. Might I recommend learning how to type correctly?");
                } else if (mistakes == 4) {
                    System.out.println("My bad. Maybe you can type. It's probably your ability to distinguish between y's and n's.");
                } else if (mistakes == 5) {
                    System.out.println("The n looks like a headless camel. The y looks like a person buried headfirst in the sand. It's so tempting to make a y out of you right now.");
                } else if (mistakes == 6) {
                    System.out.println("You're doing this on purpose aren't you? Alright, tell you what. i'll turn my back. Maybe I'm making you nervous.");
                } else if (mistakes == 7) {
                    System.out.println("Is that even a letter? Seriously you need to try.");
                } else {
                    System.out.println("Alright, that's it. I give up. I've given you the benefit of the doubt for far too long.");
                    System.out.println("*The almighty narrator sticks the player's head in the nearest sand pit. It's no use because the player's brainless head needs no oxygen to function.*");
                    performer.getCharacter().setEliminated(true);
                    System.out.println("Game Over");
                    //End game
                    break;
                }
                mistakes++;
            }
        }
    }

    /**
     * Asks if "performer" wants to use an item
     *
     * @param performer
     */
    public void askForItem(Player performer) {
        Hero playerChar = performer.getCharacter();
        Scanner s = new Scanner(System.in);
        int itemCount = 0;
        List<Item> myItems;
        int yesOrNo;  //arbitrary character not 'y' or 'n'
        int mistakes = 0;
        while (true) {
            yesOrNo = JOptionPane.showConfirmDialog(rootPane, "Confirm using item ('y' for yes, 'n' for no)?", null, JOptionPane.YES_NO_OPTION);
            if (yesOrNo == JOptionPane.YES_OPTION) {
                myItems = playerChar.getItems();
                if (!(myItems).isEmpty()) {
                    StringBuilder sb = new StringBuilder();
                    for (Item item : myItems) {
                        itemCount++;
                        sb.append(itemCount + ". " + item.getMessage() + "\n");
                    }
                    int choice = -1;
                    while ((choice < 0) || (choice >= myItems.size())) {
                        choice = Integer.parseInt(JOptionPane.showInputDialog(rootPane, sb.toString() + "Which item would you like to use (0 to cancel)?"));

                        if (choice == 0) {
                            return;
                        } else if ((choice >= 0) && (choice < myItems.size())) {
                            Item toBeUsed = myItems.get(choice + 1);
                            if (Equippable.class.isAssignableFrom(toBeUsed.getClass())) {
                                if (Weapon.class.isAssignableFrom(toBeUsed.getClass())) {
                                    if (playerChar.getWeaponEquipped()) {
                                        playerChar.getWeapon().dropWeap(playerChar);
                                    }

                                    ((Weapon) toBeUsed).equipWeap(playerChar);
                                } else if (Armor.class.isAssignableFrom(toBeUsed.getClass())) {
                                    if (playerChar.getArmorEquipped()) {
                                        playerChar.getArmor().dropArmor(playerChar);
                                    }

                                    ((Armor) toBeUsed).equipArmor(playerChar);
                                }
                            } else if (Item.class.isAssignableFrom(toBeUsed.getClass())) {
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Invalid Choice.");
                        }
                    }
                }
                break;
            } else if (yesOrNo == JOptionPane.NO_OPTION) {
                itemPhase(performer);
                break;
            } else { //cannot occur anymore
                if (mistakes <= 2) {
                    System.out.println("Invalid Answer.");
                } else if (mistakes == 3) {
                    System.out.println("Invalid Answer. Might I recommend learning how to type correctly?");
                } else if (mistakes == 4) {
                    System.out.println("My bad. Maybe you can type. It's probably your ability to distinguish between y's and n's.");
                } else if (mistakes == 5) {
                    System.out.println("The n looks like a headless camel. The y looks like a person buried headfirst in the sand. It's so tempting to make a y out of you right now.");
                } else if (mistakes == 6) {
                    System.out.println("You're doing this on purpose aren't you? Alright, tell you what. i'll turn my back. Maybe I'm making you nervous.");
                } else if (mistakes == 7) {
                    System.out.println("Is that even a letter? Seriously you need to try.");
                } else {
                    System.out.println("Alright, that's it. I give up. I've given you the benefit of the doubt for far too long.");
                    System.out.println("*The almighty narrator sticks the player's head in the nearest sand pit. It's no use because the player's brainless head needs no oxygen to function.*");
                    performer.getCharacter().setEliminated(true);
                    System.out.println("Game Over");
                    //End game
                    break;
                }
                mistakes++;
            }
        }
    }

    private void updatePlayerInfo() {
        if (players != null) {
            StringBuilder sb;
            for (int i = 0; i < players.length; i++) {
                sb = new StringBuilder();
                if (players[i] != null) {
                    sb.append("<html>");
                    sb.append("Player " + (i + 1) + " Name: " + players[i].getCustomName());
                    sb.append("<br>");
                    sb.append("Class: " + players[i].getCharacter().getClassName());
                    sb.append("<br>");
                    sb.append("STR: " + players[i].getCharacter().getStrength() + " AGL: " + players[i].getCharacter().getAgility());
                    sb.append("<br>");
                    sb.append("MAG: " + players[i].getCharacter().getMagic() + " DEF: " + players[i].getCharacter().getDefense());
                    sb.append("<br>");
                    sb.append("Luck: " + players[i].getCharacter().getLuck() + " Gold: " + players[i].getCharacter().getGold());
                    sb.append("<br>");
                    sb.append("HP: " + players[i].getCharacter().getCurrentHP() + " MP: " + players[i].getCharacter().getCurrentMP());
                    sb.append("<br>");
                    sb.append("</html>");
                }
                if (i == 0) {
                    PlayerOneInfoLabel.setText(sb.toString());
                } else if (i == 1) {
                    PlayerTwoInfoLabel.setText(sb.toString());
                } else if (i == 2) {
                    PlayerThreeInfoLabel.setText(sb.toString());
                } else if (i == 3) {
                    PlayerFourInfoLabel.setText(sb.toString());
                }
            }

            //Clear "Player ? Info" for nonexistent players 
            if (howmany < 4) {
                PlayerFourInfoLabel.setText("");
                if (howmany < 3) {
                    PlayerThreeInfoLabel.setText("");
                }
            }
        }

        //Locations
        for (int i = 0; i < orderedPlayers.length; i++) {
            updatePlayerLoc(orderedPlayers[i]);
        }
    }

    private void clearNonPlayerLabels(JLabel[] charLabels, Player[] playas) {

        int takenSpaces[] = new int[playas.length];
        int k = 0;
        for (int i = 0; i < charLabels.length; i++) {
            for (int j = 0; j < playas.length; j++) {
                if (playas[j].getCurrentSpace().getSpaceID() == i) { //if player is on space i
                    takenSpaces[k] = i; //store for later
                    k++;
                    i++;
                }
            }
        }

        for (int i = 0; i < charLabels.length; i++) {
            for (int j = 0; j < k; j++) {
                if (takenSpaces[j] != i) { //space is not taken
                    charLabels[i].setIcon(null);
                }
            }
        }
    }

    private void updatePlayerLoc(Player playa) {
        String imageName = new String();
        if (playa.getCharacter() instanceof Barbarian) {
            imageName = "Barbarian-resized.png";
        } else if (playa.getCharacter() instanceof Ninja) {
            imageName = "Ninja-resized.png";
        } else if (playa.getCharacter() instanceof Mage) {
            imageName = "Mage-resized.png";
        } else if (playa.getCharacter() instanceof Knight) {
            imageName = "Knight-resized.png";
        } else {
            OutputTextArea.append(playa.getCustomName() + " is not using a valid class.");
            return;
        }
        ImageIcon icon = new ImageIcon(getClass().getResource("/images/" + imageName));

        JLabel[] charLabels = new JLabel[spaceTotal];
        //assign charLabels manually
        charLabels[0] = characterLabel1;
        charLabels[1] = characterLabel2;
        charLabels[2] = characterLabel3;
        charLabels[3] = characterLabel4;
        charLabels[4] = characterLabel5;
        charLabels[5] = characterLabel6;
        charLabels[6] = characterLabel7;
        charLabels[7] = characterLabel8;
        charLabels[8] = characterLabel9;
        charLabels[9] = characterLabel10;
        charLabels[10] = characterLabel11;
        charLabels[11] = characterLabel12;
        charLabels[12] = characterLabel13;
        charLabels[13] = characterLabel14;
        charLabels[14] = characterLabel15;
        charLabels[15] = characterLabel16;
        charLabels[16] = characterLabel17;
        charLabels[17] = characterLabel18;
        charLabels[18] = characterLabel19;
        charLabels[19] = characterLabel20;
        charLabels[20] = characterLabel21;
        charLabels[21] = characterLabel22;

        for (int i = 0; i < charLabels.length; i++) {
            if (playa.getCurrentSpace().getSpaceID() == i) {
                charLabels[i].setIcon(icon);
            }
        }
        clearNonPlayerLabels(charLabels, orderedPlayers);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoardGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoardGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoardGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoardGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BoardGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CurPhaseLabel;
    private javax.swing.JLabel CurPlayerLabel;
    private javax.swing.JLabel ItemEightLabel;
    private javax.swing.JLabel ItemFiveLabel;
    private javax.swing.JLabel ItemFourLabel;
    private javax.swing.JLabel ItemOneLabel;
    private javax.swing.JLabel ItemSevenLabel;
    private javax.swing.JLabel ItemSixLabel;
    private javax.swing.JLabel ItemThreeLabel;
    private javax.swing.JLabel ItemTwoLabel;
    private javax.swing.JScrollPane OutputScrollPane;
    private javax.swing.JTextArea OutputTextArea;
    private javax.swing.JLabel PlayerFourInfoLabel;
    private javax.swing.JLabel PlayerOneInfoLabel;
    private javax.swing.JLabel PlayerThreeInfoLabel;
    private javax.swing.JLabel PlayerTwoInfoLabel;
    private javax.swing.JLabel boardLabel;
    private javax.swing.JLayeredPane boardLayeredPane;
    private javax.swing.JLabel characterLabel1;
    private javax.swing.JLabel characterLabel10;
    private javax.swing.JLabel characterLabel11;
    private javax.swing.JLabel characterLabel12;
    private javax.swing.JLabel characterLabel13;
    private javax.swing.JLabel characterLabel14;
    private javax.swing.JLabel characterLabel15;
    private javax.swing.JLabel characterLabel16;
    private javax.swing.JLabel characterLabel17;
    private javax.swing.JLabel characterLabel18;
    private javax.swing.JLabel characterLabel19;
    private javax.swing.JLabel characterLabel2;
    private javax.swing.JLabel characterLabel20;
    private javax.swing.JLabel characterLabel21;
    private javax.swing.JLabel characterLabel22;
    private javax.swing.JLabel characterLabel3;
    private javax.swing.JLabel characterLabel4;
    private javax.swing.JLabel characterLabel5;
    private javax.swing.JLabel characterLabel6;
    private javax.swing.JLabel characterLabel7;
    private javax.swing.JLabel characterLabel8;
    private javax.swing.JLabel characterLabel9;
    private javax.swing.JLabel dieLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton rollDieButton;
    private javax.swing.JLabel spaceLabel1;
    private javax.swing.JLabel spaceLabel10;
    private javax.swing.JLabel spaceLabel11;
    private javax.swing.JLabel spaceLabel12;
    private javax.swing.JLabel spaceLabel13;
    private javax.swing.JLabel spaceLabel14;
    private javax.swing.JLabel spaceLabel15;
    private javax.swing.JLabel spaceLabel16;
    private javax.swing.JLabel spaceLabel17;
    private javax.swing.JLabel spaceLabel18;
    private javax.swing.JLabel spaceLabel19;
    private javax.swing.JLabel spaceLabel2;
    private javax.swing.JLabel spaceLabel20;
    private javax.swing.JLabel spaceLabel21;
    private javax.swing.JLabel spaceLabel22;
    private javax.swing.JLabel spaceLabel3;
    private javax.swing.JLabel spaceLabel4;
    private javax.swing.JLabel spaceLabel5;
    private javax.swing.JLabel spaceLabel6;
    private javax.swing.JLabel spaceLabel7;
    private javax.swing.JLabel spaceLabel8;
    private javax.swing.JLabel spaceLabel9;
    // End of variables declaration//GEN-END:variables
}
